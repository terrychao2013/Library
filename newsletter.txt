代码的故事
一晃眼加入触宝已经三年了，还能翻出三年前发给Leader的实习邮件，还能想起那个百无聊懒的下午，因为宅在寝室无所事事，所以随意写了一封实习邮件就过来做了实习生，接着正式入职，三年里和触宝一起成长，当初七八十人的触宝增长到了两三百人，而我也从当初的菜鸟实习生成长为一个研发工程师，回顾起来，我对自己完成从学生到职业工程师的转变还是感到满意的，也庆幸在我职业生涯的开端有触宝这样的平台能够锻炼自己。有很多的文章讨论过大公司和小公司各自的优劣，在触宝这样一个快速成长的公司中，只要自己愿意，总会有各种机会让自己得到各方面的成长，我认为要想在这些机会中真正的成长起来的一个重要途径就是每件事都做多一点点的投入。

成长是多方面的，对于一个工程师来说，有编码能力的增长，问题解决能力的提升，也有沟通能力的提高。任何一个方面的提高对自己都是一个巨大的进步，当然每个方面的进步都来的不是那么轻而易举的，需要花费巨大的精力和汗水。

不记得在哪里看到的一种说法：在从事Android开发的前三年，在没有遇到和解决足够多的问题之前，你都是菜鸟。这说法表明了经验的重要性，其实不只是安卓开发，我想其他各种应用开发都会面临各种各样的挑战，在这些挑战面前，多做一点工作就会让自己获得更多的收获。至今印象深刻的一次收获是我对一行代码长度的调整。对于软件开发工程师而言，编写的代码就像写的文章一样，好的文章段落分明，文字优美，读起来让人欲罢不能，而好的代码同样具有这样的功效。优秀的开发人员懂得“代码首先是给人读的，其次才是给机器运行的”。

在从事安卓开发的头两年，我写起代码来并没有任何的章法，怎么方便怎么来。经过两年的锻炼，积累不少的代码经验，但是总觉得自己写的代码和别人的有很大的差距，自己的代码读起来总是让人感觉晦涩不清。有一天看到了一份google的代码规范，其中有一条很吸引我：一行代码的长度最好不超过80或者100个字符.从来没有想过一行代码的长度能有多大的影响，抱着试一试的想法，在接下来的一周时间里，我不断监督自己是否违反了代码长度的规定。刚开始定的目标是80个字符。在第一天我就发现要执行这一规定有多么困难。随便一行都可能超出规定。只能花费很多的时间来修改代码让他们尽量满足要求。这样做了几次之后我发现自己的代码比以前好看多了，无论是格式还是逻辑都很漂亮。随后的几天我将标准放宽到100个字符，我发现经过前期80个字符的折磨，100个字符简直就是小菜一碟，经过对比两种方案，我最终选择了100个字符作为一行代码长度的限制，因为100个字符既能保证结构和逻辑的优美，又能给予编写者较大的自由度而不致于纠结在几个字符的长度调整。

每次想到一行代码的故事，我都感觉到，成长就隐藏在日常工作的每一个瞬间。可能仅仅简单到是一行代码的长度调整，在日复一日的工作中改进的每一小点都将成为成长之路上的垫脚石。铺垫得多了就能够走到另一个高度。虽然自己目前的水平远没有达到一个优秀工程师的标准，但和当初刚开始实习的那个菜鸟比起来，成长的痕迹是十分明显的。这些成长很大一部分都是在过去三年里触宝输入法的高速发展带来的，用户数目的增长带来了各种挑战，如何跟上迅速增长的用户对产品的期望，保证产品的质量，协调各方在庞大用户群中的运营活动等等，都是这个快速成长的产品带给我们的机会和挑战。面对这些挑战，我们能做的就是不断提高自己的水平，以期望能够满足产品的要求。

在移动互联网领域，各种情况瞬息万变，产品研发人员面对的一个十分头疼的问题就是需求的变更和层出不穷。在茫茫多的需求面前，我们除了克制不必要的需求外，还有十分重要的一项技能就是在研发一个功能的时候尽量对可能的情况进行考虑，提高代码的健壮性和可扩展性。这是经历了三年痛苦的需求变更之后发现的一个提高效率的行之有效的方法。就拿最近的一次需求来说，某天boss突然提到需要在现有的结构下支持一种新的功能，一般的步骤是研发需要在明确需求后开发出产品，然后发布到市场上，这样的周期是非常长的。经过短暂的调研之后发现，新的功能在现在的结构下其实已经可以比较好的支持了，而当初并没有这样的一个需求。回忆起来，大约是在半年前开发相关的功能的时候，为了程序的健壮性，我在代码中增加了几行对相关情况的处理，没想到半年过去了，那几行代码突然可以发挥作用了，而新的需求也基本不需要再投入太多的研发力量了。我想每个工程师都希望看到这样的情况，其成就感不亚于在足球场上将球传给三秒后的自己。而这些成就感的获得，仅仅是因为当初多做的一点点投入。

和代码相关的故事还有很多，我想每一个有过成长感觉的软件工程师都能够举出一堆例子，这些例子一定是在最基础，最平常的工作中遇到的问题，他们那么小，小到大多数人都忽略了他们的重要性，但他们又如此重要，重要到可以促进一个菜鸟向工程师的转变，这就是我想讲的代码的故事。



