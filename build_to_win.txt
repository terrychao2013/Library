
思考题 －－ 读 构建之法
在日常的软件开发过程中，我们常常遇到这样或者那样的问题，不知道有的东西该不该做，不知道怎样说服自己或者他人，不知道怎样写代码，做测试。可以用一些类比的方式，找到相似的问题，从而坚定我们的信念，很多时候，答案在我们询问自己的时候就已经在那里了。多做做思考题就好了。下面是两个来自于《构建之法》的思考题。

问题一：
如果一架民用飞机上有一个功能，用户使用它的概率是百万分之一，你还要做这个功能么？你的选择是：
1. 根本不考虑
2. 如果没有时间实现这个功能就算了
3. 做了，但是不用告诉用户
4. 做了，而且不厌其烦的告诉用户如何使用
你会如何选择？
如果这个功能是程序开发中的一个bug，你会怎么处理？
如果这个功能是飞机的安全功能呢？

思考题二：
开发冲刺到一半的时候，产品负责人突然发现要马上做重要的改动！或者某个大佬要看某个不在计划中的功能的演示，怎么办？
把这个问题换个场景来问问，可以变成下面的样子：
如果一个运动员在跑一百米冲刺，但是跑到一半的时候，领导突然想看一百一十米栏的比赛，前面马上摆起栏架，大家要准备8步上栏！怎么办？
一个有正常头脑的运动员和教练员会说：去你的，要改主意，也要等老子冲刺完了再说啊！

就是用这么通俗易懂的语言，邹欣老师在《构建之法》中对软件工程做了深入浅出的描述，作为软件工程师中的战斗机，邹欣老师在书中谈及了工程师的个人素养，团队的开发习惯，产品研发的流程，测试上线的规范，需求分析的方法，用户体验的改善，还探讨了对软件工程师的道德要求。让人从全局的角度去认识开发一款软件产品的各个环节，二爷鉴书对此的总结是：水面下的冰山。不得不佩服二爷的功力，短短几个字就突出了一个非常重要的观点，编写代码只是软件开发过程中的一个环节，非常重要，但远远不是全部，就像冰山的一角，看到的只是一小部分，真正的冰山还藏在水面以下。要想了解冰山的全部，最好去阅读一下《构建之法》这本书，借助书中的观点思考软件开发的过程该怎样进行。

回想起来，《构建之法》对于软件工程师可以说是一本开眼之作。让人跳出局限的圈子，放眼全局去思考，从实际出发，绝不生搬硬套某种标准，能够让狭隘的思维变得开阔起来。比如说，一直觉得敏捷开发方式就是最先进的开发方法，却忘记了任何事物都有其局限性。邹欣老师就很客观的对比了各种开发方式的优缺点，让人明白什么情况下该用什么方式。像登月计划显然就是不能用敏捷方式开发的，如果用了敏捷方式，那么，前N批宇航员都会挂掉！目前除了敏捷方式，还有多种开发方式存在，比较新的一些就包括精益开发，这主要就是针对敏捷开发模式中不足的地方提出的，大体上和敏捷保持了同样的模式，但更加侧重对于质量的强调。之前对这种模式没有太多的关注，现在觉得也是对实际工作的一种帮助。总之就是要具体问题具体分析，不能一概而论。

阅读《构建之法》的另一个好处是可以帮助我们坚定已有的一些好的习惯和思想。比如说，在临近发布的时候，还有很多的bug没有得到修复，同时测试又发现了很多的bug。这种时候应该怎么做呢？是推迟版本的发布尽力修复bug，还是不管bug的状态，强势发布？我们之前的做法是根据bug的优先级，将一些bug放到下一个版本修复，只修复一些必要修复的bug。这里存在一个问题就是，本来judge过一次了，可最后快到发布了，还是要调整一些bug到后面的版本。虽然从逻辑上讲，这样是正确的，可总是在做这样的操作的时候，难免产生一种疑惑，本来已经judge过了，为什么还要judge，是自己的能力不够么？当然，不排除第一次judge的时候存在一些疏忽之处，但最关键的原因在于，随着版本进化到后期，修复bug的门槛需要逐渐提高，同样的bug，在alpha版本和beta版本修复的优先级是不一样的。而在最后的release阶段，修复bug更是要严谨慎重，防止因为修复bug引入更多更严重的问题。所以越到后来，工程师应该越”懒惰“， 为了版本的质量，需要抑制希望清空bug的欲望。从这方面考虑，就会发现之前的顾虑都是不必要的，可以更加放开手脚的挪bug了～

很多时候遇到问题的原因是不能理解这个问题在整体中的意义，如果站在一个更高的点上看问题，很多问题可能就不成问题了。













