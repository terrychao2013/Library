
好的软件作品，往往源自于开发者的个人需要。

优秀的程序员知道写什么，卓越的程序员知道改写（和重用）什么。

卓越程序员们有个很重要的特征是“建设性懒惰”，他们知道人们要的是结果而不是勤奋，

计划好扔掉一个吧，迟早你会这么做的。”（Fred Brooks，《人月神话》第11章）

在你第一次把问题解决的时候，你往往并不了解这个问题，第二次你才可能知道怎么把事情做好。所以，如果你想做对事情，至少要再做一次

如果你有正确的态度，有趣的事情自然会找到你

当你对一个程序不再感兴趣时，你最后的责任就是把它交给一个可以胜任的接棒者。

把你的用户当成开发合作者对待，如果想让代码质量快速提升并有效排错，这是最省心的途径。

创新、酝酿和行动最频繁发生的地方总是在产品的开放部分，而这部分的改进也总是由庞大而多样化的用户群完成。

如果有足够多的beta测试者和合作开发者，几乎所有问题都会很快显现，然后自然有人会把它解决。

一群专家（或一群无知的家伙）的平均观点要比一个随机选择的人的观点更有预见性，这就是“德尔菲效应”(Delphi effect)。

在一个已经延期的项目上增加人手，只会让项目更加延期。

聪明的数据结构配上愚笨的代码，远比反过来要好得多。

如果你把beta测试者当做最珍贵的资源对待，他们就会成为你最珍贵的资源。

通常你不该问自己是否找到了正确答案，而是该问你是否提出了正确的问题，因为也许问题本身需要被重新定义。
当你发现自己在开发中碰壁时，当你发现自己苦思冥想也很难做出下一个补丁时，通常你不该问自己是否找到了正确答案，而是该问你是否提出了正确的问题，因为也许问题本身需要被重新定义。

“设计上的完美不是没有东西可以再加，而是没有东西可以再减。”

任何工具都应具备预期内的功能，但一个伟大的工具能给你带来预期外的功能。

写网关类软件时，尽可能不要干扰数据流，而且绝不要扔掉信息，除非接收方强迫你这么做。

当你的语言还远不是图灵完备（Turing-complete）的时候，语法糖会让你受益良多。

系统的安全性只取决于它所拥有的秘密。谨防虚假的秘密。

在软件设计上表现得聪明而有原创性，容易养成一个习惯——在应该保持软件健壮性和简单性的时候，你往往下意识把它弄得既华丽又复杂。

想要解决一个有趣的问题，先去找一个让你感兴趣的问题。

项目复杂度和沟通成本与开发人员数目的平方成正比，与此同时，工作完成量只会随人数线性增长。

如果开发协调者有一个至少像Internet这样好的沟通媒介，并且知道如何不靠强制来领导，那么多人合作必然强于单兵作战。

“玩”是创造性活动中最具经济效能的工作模式。

如果它不能像我所预期的那样工作，那就不是好的——不管它多么聪明和有原创性。

心智层的拓展性工作要比在某功能域内（对现有作品）的重复性工作好。

能进入主要发行版的作品比不能进入的好。在所有主要发行版中都包含的作品最令人尊敬。

“使用”是最真实的赞美，类别杀手比同类竞争者

相比那些只挑有趣和简单工作的人，长期致力于艰苦和乏味工作（如调试、写文档）的人更令人钦佩。

重要的功能扩展比低层次的修补

我给你报酬是因为我认可你工作的价值”和“你得到报酬是因为你达到了我的标准”，第一种说法不会挫伤积极性，但第二种会。

如果你想获得最有效率的产品，你必须放弃促进程序员生产力。做好他们的后勤，让他们自己做主，并忘掉最后期限。

质量更好、可靠性更高、成本更低、选择更多。）

该软件本身没有销售价值，Cisco不会因此损失什么，但却会获益良多。通过鼓励社区（由遍布在多个公司的用户和合作开发者组成）成长，Cisco能对冲原始开发者离开的损失。

开源不仅可以降低成本，还能分散和减轻风险。

没有管理层要求他们使用不合适和过时的语言或开发环境；不会因为产品差异化或知识产权保护的需要而以一种新的、不兼容的方式重新发明“轮子”；（最重要的是）没有“最后期限”；不需要在产品还没有做好时就匆匆忙忙推出1.0版本。

理论和语言的缺乏在两个方面对我们不利：一是我们不能系统性地思考如何改进我们的方法，二是我们难以向别人解释和推销我们的方法。

我们的认知不仅可能也确实往往背离现实”

Linux最重要的特点不是技术上的，而是社会学上

每周发布，并在接下来几天内获取数百个用户的反馈。他们创造了一种类似达尔文“物竞天择”的选择机制，被选择对象则是开发者们所做的种种软件修改。让所有人吃惊的是，这种方式工作得非常好。

只要眼睛多，bug容易捉。

·明确目标并让大家朝同一个方向努力。 ·监督并确保关键细节不被遗漏。 ·激励人们去做那些乏味但必要的“体力活”。 ·组织人员部署并获得最佳生产力。 ·调配项目所需的资源。

1.可靠性/稳定性/可扩展性非常重要。 2.除了独立的同行评审，没有其他便捷易行的方法验证设计和实现的正确性。 3.该软件对客户的业务非常关键。 4.该软件创建或运转一个公共计算或通信基础架构。 5.关键方法（或能实现同等功能的方法）属于公共知识。

